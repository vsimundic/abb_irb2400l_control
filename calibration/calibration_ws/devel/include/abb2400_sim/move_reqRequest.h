// Generated by gencpp from file abb2400_sim/move_reqRequest.msg
// DO NOT EDIT!


#ifndef ABB2400_SIM_MESSAGE_MOVE_REQREQUEST_H
#define ABB2400_SIM_MESSAGE_MOVE_REQREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point.h>
#include <geometry_msgs/Quaternion.h>

namespace abb2400_sim
{
template <class ContainerAllocator>
struct move_reqRequest_
{
  typedef move_reqRequest_<ContainerAllocator> Type;

  move_reqRequest_()
    : point()
    , orientation()  {
    }
  move_reqRequest_(const ContainerAllocator& _alloc)
    : point(_alloc)
    , orientation(_alloc)  {
  (void)_alloc;
    }



   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _point_type;
  _point_type point;

   typedef  ::geometry_msgs::Quaternion_<ContainerAllocator>  _orientation_type;
  _orientation_type orientation;





  typedef boost::shared_ptr< ::abb2400_sim::move_reqRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::abb2400_sim::move_reqRequest_<ContainerAllocator> const> ConstPtr;

}; // struct move_reqRequest_

typedef ::abb2400_sim::move_reqRequest_<std::allocator<void> > move_reqRequest;

typedef boost::shared_ptr< ::abb2400_sim::move_reqRequest > move_reqRequestPtr;
typedef boost::shared_ptr< ::abb2400_sim::move_reqRequest const> move_reqRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::abb2400_sim::move_reqRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::abb2400_sim::move_reqRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::abb2400_sim::move_reqRequest_<ContainerAllocator1> & lhs, const ::abb2400_sim::move_reqRequest_<ContainerAllocator2> & rhs)
{
  return lhs.point == rhs.point &&
    lhs.orientation == rhs.orientation;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::abb2400_sim::move_reqRequest_<ContainerAllocator1> & lhs, const ::abb2400_sim::move_reqRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace abb2400_sim

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::abb2400_sim::move_reqRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::abb2400_sim::move_reqRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::abb2400_sim::move_reqRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::abb2400_sim::move_reqRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::abb2400_sim::move_reqRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::abb2400_sim::move_reqRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::abb2400_sim::move_reqRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e46acbd3406448bf07bbcf26c4152631";
  }

  static const char* value(const ::abb2400_sim::move_reqRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe46acbd3406448bfULL;
  static const uint64_t static_value2 = 0x07bbcf26c4152631ULL;
};

template<class ContainerAllocator>
struct DataType< ::abb2400_sim::move_reqRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "abb2400_sim/move_reqRequest";
  }

  static const char* value(const ::abb2400_sim::move_reqRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::abb2400_sim::move_reqRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "geometry_msgs/Point point\n"
"geometry_msgs/Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
;
  }

  static const char* value(const ::abb2400_sim::move_reqRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::abb2400_sim::move_reqRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.point);
      stream.next(m.orientation);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct move_reqRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::abb2400_sim::move_reqRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::abb2400_sim::move_reqRequest_<ContainerAllocator>& v)
  {
    s << indent << "point: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.point);
    s << indent << "orientation: ";
    s << std::endl;
    Printer< ::geometry_msgs::Quaternion_<ContainerAllocator> >::stream(s, indent + "  ", v.orientation);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ABB2400_SIM_MESSAGE_MOVE_REQREQUEST_H
