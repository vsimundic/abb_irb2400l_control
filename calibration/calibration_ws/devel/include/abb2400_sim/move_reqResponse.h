// Generated by gencpp from file abb2400_sim/move_reqResponse.msg
// DO NOT EDIT!


#ifndef ABB2400_SIM_MESSAGE_MOVE_REQRESPONSE_H
#define ABB2400_SIM_MESSAGE_MOVE_REQRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace abb2400_sim
{
template <class ContainerAllocator>
struct move_reqResponse_
{
  typedef move_reqResponse_<ContainerAllocator> Type;

  move_reqResponse_()
    : retCode(0)  {
    }
  move_reqResponse_(const ContainerAllocator& _alloc)
    : retCode(0)  {
  (void)_alloc;
    }



   typedef int8_t _retCode_type;
  _retCode_type retCode;





  typedef boost::shared_ptr< ::abb2400_sim::move_reqResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::abb2400_sim::move_reqResponse_<ContainerAllocator> const> ConstPtr;

}; // struct move_reqResponse_

typedef ::abb2400_sim::move_reqResponse_<std::allocator<void> > move_reqResponse;

typedef boost::shared_ptr< ::abb2400_sim::move_reqResponse > move_reqResponsePtr;
typedef boost::shared_ptr< ::abb2400_sim::move_reqResponse const> move_reqResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::abb2400_sim::move_reqResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::abb2400_sim::move_reqResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::abb2400_sim::move_reqResponse_<ContainerAllocator1> & lhs, const ::abb2400_sim::move_reqResponse_<ContainerAllocator2> & rhs)
{
  return lhs.retCode == rhs.retCode;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::abb2400_sim::move_reqResponse_<ContainerAllocator1> & lhs, const ::abb2400_sim::move_reqResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace abb2400_sim

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::abb2400_sim::move_reqResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::abb2400_sim::move_reqResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::abb2400_sim::move_reqResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::abb2400_sim::move_reqResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::abb2400_sim::move_reqResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::abb2400_sim::move_reqResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::abb2400_sim::move_reqResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "300685d56b9509345e77b575395702d2";
  }

  static const char* value(const ::abb2400_sim::move_reqResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x300685d56b950934ULL;
  static const uint64_t static_value2 = 0x5e77b575395702d2ULL;
};

template<class ContainerAllocator>
struct DataType< ::abb2400_sim::move_reqResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "abb2400_sim/move_reqResponse";
  }

  static const char* value(const ::abb2400_sim::move_reqResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::abb2400_sim::move_reqResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int8 retCode\n"
;
  }

  static const char* value(const ::abb2400_sim::move_reqResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::abb2400_sim::move_reqResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.retCode);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct move_reqResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::abb2400_sim::move_reqResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::abb2400_sim::move_reqResponse_<ContainerAllocator>& v)
  {
    s << indent << "retCode: ";
    Printer<int8_t>::stream(s, indent + "  ", v.retCode);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ABB2400_SIM_MESSAGE_MOVE_REQRESPONSE_H
