#include <moveit/move_group_interface/move_group_interface.h>
#include <moveit/planning_scene_interface/planning_scene_interface.h>

#include <moveit_msgs/DisplayRobotState.h>
#include <moveit_msgs/DisplayTrajectory.h>
#include <moveit_msgs/AttachedCollisionObject.h>
#include <moveit_msgs/CollisionObject.h>

#include <moveit_visual_tools/moveit_visual_tools.h>

#include "roi_msgs/overlap.hpp"
#include "roi_msgs/HumanEntries.h"

#include <sstream>
#include <ros/ros.h>
#include <ros/console.h>
using namespace ros;

int main(int argc, char **argv)
{
    ros::init(argc, argv, "abb_irb2400_test_custom_node");
    ros::NodeHandle node_handle;
    ros::AsyncSpinner spinner(1);
    spinner.start();

    static const std::string PLANNING_GROUP = "manipulator";
    
    moveit::planning_interface::MoveGroupInterface move_group(PLANNING_GROUP);
    moveit::planning_interface::PlanningSceneInterface planning_scene_interface;

    const robot_state::JointModelGroup* joint_model_group = move_group.getCurrentState()->getJointModelGroup(PLANNING_GROUP);
    moveit_visual_tools::MoveItVisualTools visual_tools("base_link");
    
    std::vector<double> joint_group_positions;
    moveit::core::RobotStatePtr current_state = move_group.getCurrentState();
    current_state->copyJointGroupPositions(joint_model_group, joint_group_positions);

    std::vector<double>::iterator it = joint_group_positions.begin();

    for(it; it != joint_group_positions.end(); ++it)
    {
        ROS_WARN("%f\n", *it);
    }


    ros::Publisher display_publisher = node_handle.advertise<moveit_msgs::DisplayTrajectory>("/move_group/display_planned_path", 1, true);
    moveit_msgs::DisplayTrajectory display_trajectory;

    // Setting custom goal position

    float robot_x, robot_y, robot_z, robot_qw, robot_qx, robot_qy, robot_qz;
    robot_x = 0.05;
    robot_y = -0.635;
    robot_z = 1.012;
    robot_qw = 0.44401;
    robot_qx = 0.89527;
    robot_qy = 0.03111;
    robot_qz = 0.01948;

    // geometry_msgs::Pose target_pose1;
    // target_pose1.orientation.w = 1.0;
    // target_pose1.position.x = 0.28;
    // target_pose1.position.y = -0.2;
    // target_pose1.position.z = 0.5;
    // move_group.setPoseTarget(target_pose1);

    geometry_msgs::Pose target_pose;

    target_pose.position.x = robot_x;
    target_pose.position.y = robot_y;
    target_pose.position.z = robot_z;

    target_pose.orientation.w = robot_qw;
    target_pose.orientation.x = robot_qx;
    target_pose.orientation.y = robot_qy;
    target_pose.orientation.z = robot_qz;

    // move_group.setPoseTarget(target_pose);
    move_group.setPlanningTime(10);
    move_group.setPoseTarget(target_pose);
    move_group.move();

    // Motion plan from currrent location to custom position
    moveit::planning_interface::MoveGroupInterface::Plan my_plan;
    bool success = (move_group.plan(my_plan) == moveit::planning_interface::MoveItErrorCode::SUCCESS);

    ROS_INFO_NAMED("testing_custom", "Visualizing plan 1 (pose goal) %s", success ? "" : "FAILED");


    /* Sleep to give RViz time to visualize the plan. */
    sleep(5.0);

    joint_model_group = move_group.getCurrentState()->getJointModelGroup(PLANNING_GROUP);
    current_state->copyJointGroupPositions(joint_model_group, joint_group_positions);
    
    it = joint_group_positions.begin();
    ROS_WARN("\n");
    for(it; it != joint_group_positions.end(); ++it)
    {
        ROS_WARN("%f\n", *it);
    }
    
    ros::shutdown();
    
    return 0;
}